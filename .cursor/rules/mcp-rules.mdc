# MCP（Model Context Protocol）开发规则

## 1. 架构概述

### 1.1 统一MCP服务器
- **位置**: `api/app/mcp/unified_server.py`
- **职责**: 统一管理所有MCP工具，提供标准化的工具调用接口
- **端点**: `http://localhost:8000/mcp` (本地访问) 或 `http://host.docker.internal:8000/mcp` (Docker容器访问)
- **协议**: 支持 SSE (Server-Sent Events) 传输

### 1.2 分层架构
- **Controller层**: `api/app/mcp/endpoints/mcp_config.py`
- **Service层**: `api/app/mcp/mcp_group_service.py`
- **Schema层**: `api/app/mcp/schemas/mcp.py`
- **Model层**: `api/app/mcp/infrastructure/db/models.py`

## 2. API路由规范

### 2.1 路由前缀
```python
# 管理员MCP配置接口
api_router.include_router(mcp_config.router, prefix="/mcp/admin", tags=["mcp-admin"])

# 实际MCP服务器端点（供Agent等外部系统调用）
# http://localhost:8000/mcp (本地访问)
# http://host.docker.internal:8000/mcp (Docker容器访问)
```

### 2.2 主要端点
- **分组管理**: `/api/v1/mcp/admin/groups`
- **工具管理**: `/api/v1/mcp/admin/tools`
- **Agent配置**: `/api/v1/mcp/admin/agent-config`
- **服务器状态**: `/api/v1/mcp/admin/server/status`
- **实际MCP服务**: `/mcp` (无前缀)

## 3. 权限控制

### 3.1 分组权限
- 每个MCP分组拥有独立的API密钥
- 支持用户层级访问控制 (`user_tier_access`)
- 支持角色权限控制 (`allowed_roles`)

### 3.2 API密钥管理
- 创建分组时自动生成API密钥
- 支持重新生成API密钥
- 前端显示脱敏的密钥预览
- 管理员可查看完整密钥用于配置

## 4. 工具注册规范

### 4.1 工具分类
```python
# 工具分类目录结构
api/app/mcp/tools/
├── consultation/     # 咨询相关工具
├── customer/         # 客户管理工具
├── treatment/        # 治疗方案工具
├── projects/         # 项目管理工具
└── user/            # 用户管理工具
```

### 4.2 工具元数据
```python
@dataclass
class MCPToolMetadata:
    name: str           # 工具名称
    description: str    # 工具描述
    category: str       # 工具分类
    module: str         # 所属模块
    version: str        # 工具版本
```

## 5. Agent集成规范

### 5.1 配置格式
```json
{
  "transport": "sse",
  "url": "http://localhost:8000/mcp",
  "headers": {
    "Authorization": "Bearer {api_key}"
  }
}
```

### 5.2 自动配置生成
- 通过 `/api/v1/mcp/admin/agent-config` 获取完整配置
- 只包含已启用的分组
- 自动包含权限信息

## 6. 开发规范

### 6.1 新增工具
1. 在对应分类目录下创建工具文件
2. 实现标准的MCP工具接口
3. 在工具注册表中注册
4. 更新工具元数据

### 6.2 权限验证
```python
# 所有MCP工具调用都需要验证API密钥
def verify_mcp_api_key(api_key: str) -> MCPGroup:
    # 验证API密钥有效性
    # 返回对应的分组信息
    pass
```

### 6.3 错误处理
- 统一使用MCP Schema中定义的响应格式
- 记录详细的日志信息
- 优雅处理服务器离线情况

## 7. 安全规范

### 7.1 API密钥安全
- 使用加密存储API密钥
- 前端不暴露完整密钥
- 支持密钥轮换

### 7.2 访问控制
- 基于分组的细粒度权限控制
- 支持用户层级限制
- 审计日志记录

## 8. 监控和维护

### 8.1 健康检查
- 定期检查MCP服务器状态
- 监控工具调用成功率
- 记录性能指标

### 8.2 工具同步
- 支持从MCP服务器刷新工具列表
- 自动发现新工具
- 更新工具元数据

## 9. 最佳实践

### 9.1 性能优化
- 使用异步处理工具调用
- 实现适当的超时控制
- 缓存常用工具信息

### 9.2 可维护性
- 遵循分层架构原则
- 使用统一的错误处理
- 保持代码文档同步

### 9.3 扩展性
- 支持动态加载新工具
- 模块化的工具组织结构
- 灵活的权限配置机制
 