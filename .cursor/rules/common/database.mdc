---
description: 
globs: 
alwaysApply: false
---
# 数据库开发规范

## 结构与迁移
- 所有数据库结构变更必须通过 Alembic 迁移系统管理，禁止手动直接修改数据库表结构。
- 初始数据库状态应通过迁移基准点（如 `初始数据库状态` 迁移文件）进行标记。
- 每次模型变更后，需生成新的迁移脚本并审查自动生成的 SQL 变更。
- 迁移脚本需有清晰的注释和命名，便于追踪。
- 禁止在迁移脚本中直接操作业务数据，数据迁移需单独脚本处理。

## 模型定义
- 所有 ORM 模型需统一定义在 `app/db/models/` 目录下，按功能模块拆分。
- 外键类型必须与被引用主键类型一致，避免类型不匹配。
- 所有模型需继承自统一的 `Base` 类（如 `app.db.base.Base`）。
- 新增模型或字段时，需同步更新 Alembic 迁移。

## 数据初始化与检查
- 基础数据（如角色、管理员账号）初始化应通过专用脚本（如 `init_db.py`、`seed_db.py`）完成。
- 提供辅助脚本检查数据库表结构和基础数据（如 `check_tables.py`、`check_data.py`）。
- 禁止在生产环境直接运行破坏性初始化脚本（如带 `--force` 的初始化）。

## 版本与回滚
- 迁移版本号需唯一且可追溯，推荐使用 UUID 或 Alembic 默认生成方式。
- 初始迁移的 downgrade 操作应抛出异常，防止误删所有表。
- 生产环境数据库变更需先在测试环境验证迁移脚本。

## 其他约定
- 数据库连接配置统一管理于配置文件（如 `app/core/config.py`）。
- 禁止在业务代码中硬编码数据库连接信息。
- 所有数据库操作需通过 ORM 层完成，避免直接拼接 SQL。
- 推荐使用 SQLAlchemy 的类型注解和关系映射，提升代码可读性和可维护性。

---

本规则文件适用于所有数据库相关开发、维护和运维操作。

