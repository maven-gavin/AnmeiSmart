# 技术教案编写规则

## 1. 教案结构规范

### 1.1 文档头部
```markdown
# 🚀 技术主题实战教案

## 📚 课程概述
- 课程目标和技术背景
- 学习目标和适用对象
- 前置知识要求
- 学习时长预估

## 🎯 学习目标
- 明确列出3-5个具体学习目标
- 使用动词开头（掌握、理解、学会等）
- 目标要可衡量和验证

## 📋 课程大纲
- 按逻辑顺序列出主要章节
- 每个章节用数字编号
- 简要说明每章内容
```

### 1.2 章节结构
```markdown
## 🎓 第X部分：章节标题 - 副标题

### X.1 小节标题

#### X.1.1 具体主题

**概念解释**（可选）
- 技术概念和设计思路
- 核心思想和优势

**核心代码**
```typescript
// 文件路径说明
// 核心代码实现
```

**使用示例**（可选）
```typescript
// 实际使用示例
```

**最佳实践**（可选）
- 推荐做法和注意事项
- 常见错误和避免方法
```

## 2. 代码编写规范

### 2.1 伪代码优先原则
- **使用伪代码**：重点展示核心逻辑，避免实现细节干扰
- **标注伪代码**：明确标注 `// 伪代码：功能说明`
- **保持简洁**：只展示关键部分，省略辅助代码

```typescript
// ✅ 好的示例
eventHandler.registerHandler('new_message', async (message) => {
  // 伪代码：添加到聊天列表
  addMessageToChat(message);
  
  // 伪代码：播放提示音
  playNotificationSound();
});

// ❌ 避免的示例
eventHandler.registerHandler('new_message', async (message: ChatMessage) => {
  const messageId = generateUUID();
  const timestamp = Date.now();
  const messageData = {
    id: messageId,
    content: message.data.content,
    sender: message.sender,
    timestamp: timestamp,
    type: message.type
  };
  dispatch(addMessageToChat(messageData));
  // ... 更多实现细节
});
```

### 2.2 文件路径规范
```typescript
// 文件：web/src/service/websocket/handlers/index.ts
// 代码内容...
```

### 2.3 注释规范
- **功能说明**：每个代码块前说明功能
- **关键逻辑**：复杂逻辑添加注释
- **伪代码标注**：明确标注伪代码部分

## 3. 内容组织规范

### 3.1 概念先行原则
- **先解释概念**：在展示代码前先说明设计思路
- **核心思想**：突出技术方案的核心思想
- **优势说明**：解释为什么选择这种方案

```markdown
#### 3.2.1 事件处理器注册

事件处理器模式是WebSocket消息处理的核心设计模式。它通过注册不同的处理器函数来处理不同类型的消息，实现了关注点分离和代码模块化。

**核心思想**：将消息处理逻辑分散到不同的处理器中，而不是在一个巨大的switch语句中处理所有消息类型。

```typescript
// 代码实现...
```

### 3.2 渐进式学习
- **从简单到复杂**：先展示基础概念，再展示高级特性
- **分步骤展示**：将复杂功能分解为多个步骤
- **实际应用**：最后展示完整的应用场景

### 3.3 对比展示
```markdown
#### 关键优势

**模块化设计**：每个处理器职责单一
```typescript
// 示例代码
```

**易于扩展**：添加新消息类型很简单
```typescript
// 示例代码
```

**错误隔离**：每个处理器的错误不会影响其他处理器
```typescript
// 示例代码
```
```

## 4. 教学语言规范

### 4.1 使用中文
- **主要语言**：使用中文作为主要教学语言
- **技术术语**：保留必要的英文技术术语
- **代码注释**：代码注释使用中文

### 4.2 语言风格
- **简洁明了**：使用简洁、清晰的语言
- **避免冗余**：避免重复和冗余的表述
- **逻辑清晰**：保持逻辑顺序和层次结构

### 4.3 示例说明
```markdown
// ✅ 好的示例说明
// 伪代码：添加到聊天列表
addMessageToChat(message);

// ❌ 避免的示例说明
// 将接收到的消息添加到聊天消息列表中，更新UI状态
addMessageToChat(message);
```

## 5. 格式规范

### 5.1 标题层级
- **一级标题**：使用 `#` 和表情符号
- **二级标题**：使用 `##` 和表情符号
- **三级标题**：使用 `###`
- **四级标题**：使用 `####`

### 5.2 代码块
```markdown
```typescript
// 代码内容
```
```

### 5.3 列表格式
```markdown
- **粗体项目**：重要概念使用粗体
- 普通项目：一般说明使用普通格式
```

### 5.4 分隔符
```markdown
---
```

## 6. 内容质量规范

### 6.1 技术准确性
- **验证代码**：确保代码示例在技术上是正确的
- **最新技术**：使用当前主流的技术方案
- **最佳实践**：遵循行业最佳实践

### 6.2 教育价值
- **概念清晰**：技术概念解释清晰易懂
- **实用性强**：内容具有实际应用价值
- **可操作性**：学习者能够实际操作

### 6.3 完整性
- **逻辑完整**：从概念到实现逻辑完整
- **示例完整**：提供完整的示例代码
- **说明完整**：关键点有充分说明

## 7. 最佳实践

### 7.1 教案设计
- **目标明确**：每个章节都有明确的学习目标
- **结构清晰**：内容组织逻辑清晰
- **重点突出**：重要概念和代码重点突出

### 7.2 代码示例
- **简洁有效**：代码简洁但功能完整
- **易于理解**：代码逻辑易于理解
- **可运行性**：代码示例具有可运行性

### 7.3 教学效果
- **循序渐进**：从基础到高级逐步深入
- **实践导向**：注重实际应用和操作
- **反馈及时**：提供及时的学习反馈

## 8. 常见错误避免

### 8.1 内容错误
- **避免技术错误**：确保技术内容准确无误
- **避免逻辑混乱**：保持逻辑顺序清晰
- **避免信息过载**：避免一次性提供过多信息

### 8.2 格式错误
- **避免格式不一致**：保持格式风格统一
- **避免层级混乱**：保持标题层级正确
- **避免代码格式错误**：确保代码块格式正确

### 8.3 教学错误
- **避免跳跃式教学**：避免概念跳跃，保持连续性
- **避免缺乏示例**：重要概念要有示例说明
- **避免缺乏实践**：理论要与实践相结合
description:
globs:
alwaysApply: false
---
