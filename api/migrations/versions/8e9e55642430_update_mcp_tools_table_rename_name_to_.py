"""update_mcp_tools_table_rename_name_to_tool_name

Revision ID: 8e9e55642430
Revises: 46a889469f7b
Create Date: 2025-07-28 10:55:51.246223

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8e9e55642430'
down_revision: Union[str, None] = '46a889469f7b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_mcp_logs_caller_time', 'mcp_call_logs', ['caller_app_id', 'created_at'], unique=False)
    op.create_index('idx_mcp_logs_duration', 'mcp_call_logs', ['duration_ms'], unique=False)
    op.create_index('idx_mcp_logs_group_time', 'mcp_call_logs', ['group_id', 'created_at'], unique=False)
    op.create_index('idx_mcp_logs_success', 'mcp_call_logs', ['success'], unique=False)
    op.create_index('idx_mcp_logs_tool_success_time', 'mcp_call_logs', ['tool_name', 'success', 'created_at'], unique=False)
    op.alter_column('mcp_tool_groups', 'api_key',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=512),
               comment='加密的API密钥',
               existing_comment='API密钥',
               existing_nullable=False)
    
    # 先更新现有数据，再设置NOT NULL约束
    op.execute("UPDATE mcp_tool_groups SET user_tier_access = '[\"internal\"]' WHERE user_tier_access IS NULL")
    op.execute("UPDATE mcp_tool_groups SET allowed_roles = '[]' WHERE allowed_roles IS NULL")
    
    op.alter_column('mcp_tool_groups', 'user_tier_access',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               existing_comment='允许访问的用户层级')
    op.alter_column('mcp_tool_groups', 'allowed_roles',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               existing_comment='允许访问的角色列表')
    op.drop_index('ix_mcp_tool_groups_api_key', table_name='mcp_tool_groups')
    op.create_index(op.f('ix_mcp_tool_groups_api_key'), 'mcp_tool_groups', ['api_key'], unique=False)
    op.drop_index('ix_mcp_tool_groups_name', table_name='mcp_tool_groups')
    op.create_index(op.f('ix_mcp_tool_groups_name'), 'mcp_tool_groups', ['name'], unique=False)
    op.create_index('idx_mcp_groups_created_at', 'mcp_tool_groups', ['created_at'], unique=False)
    op.create_index('idx_mcp_groups_created_by', 'mcp_tool_groups', ['created_by'], unique=False)
    op.create_index('idx_mcp_groups_enabled', 'mcp_tool_groups', ['enabled'], unique=False)
    op.create_unique_constraint('uq_mcp_groups_api_key', 'mcp_tool_groups', ['api_key'])
    op.create_unique_constraint('uq_mcp_groups_name', 'mcp_tool_groups', ['name'])
    op.add_column('mcp_tools', sa.Column('tool_name', sa.String(length=100), nullable=False, comment='工具名称'))
    op.add_column('mcp_tools', sa.Column('version', sa.String(length=20), nullable=False, comment='工具版本'))
    op.drop_index('ix_mcp_tools_name', table_name='mcp_tools')
    op.create_index('idx_mcp_tools_created_at', 'mcp_tools', ['created_at'], unique=False)
    op.create_index('idx_mcp_tools_group_enabled', 'mcp_tools', ['group_id', 'enabled'], unique=False)
    op.create_index('idx_mcp_tools_tool_name', 'mcp_tools', ['tool_name'], unique=False)
    op.create_index(op.f('ix_mcp_tools_tool_name'), 'mcp_tools', ['tool_name'], unique=False)
    op.create_unique_constraint('uq_mcp_tools_group_tool_name', 'mcp_tools', ['group_id', 'tool_name'])
    op.drop_column('mcp_tools', 'name')
    op.drop_column('mcp_tools', 'function_name')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('mcp_tools', sa.Column('function_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='函数名称'))
    op.add_column('mcp_tools', sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='工具名称'))
    op.drop_constraint('uq_mcp_tools_group_tool_name', 'mcp_tools', type_='unique')
    op.drop_index(op.f('ix_mcp_tools_tool_name'), table_name='mcp_tools')
    op.drop_index('idx_mcp_tools_tool_name', table_name='mcp_tools')
    op.drop_index('idx_mcp_tools_group_enabled', table_name='mcp_tools')
    op.drop_index('idx_mcp_tools_created_at', table_name='mcp_tools')
    op.create_index('ix_mcp_tools_name', 'mcp_tools', ['name'], unique=False)
    op.drop_column('mcp_tools', 'version')
    op.drop_column('mcp_tools', 'tool_name')
    op.drop_constraint('uq_mcp_groups_name', 'mcp_tool_groups', type_='unique')
    op.drop_constraint('uq_mcp_groups_api_key', 'mcp_tool_groups', type_='unique')
    op.drop_index('idx_mcp_groups_enabled', table_name='mcp_tool_groups')
    op.drop_index('idx_mcp_groups_created_by', table_name='mcp_tool_groups')
    op.drop_index('idx_mcp_groups_created_at', table_name='mcp_tool_groups')
    op.drop_index(op.f('ix_mcp_tool_groups_name'), table_name='mcp_tool_groups')
    op.create_index('ix_mcp_tool_groups_name', 'mcp_tool_groups', ['name'], unique=True)
    op.drop_index(op.f('ix_mcp_tool_groups_api_key'), table_name='mcp_tool_groups')
    op.create_index('ix_mcp_tool_groups_api_key', 'mcp_tool_groups', ['api_key'], unique=True)
    op.alter_column('mcp_tool_groups', 'allowed_roles',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               existing_comment='允许访问的角色列表')
    op.alter_column('mcp_tool_groups', 'user_tier_access',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               existing_comment='允许访问的用户层级')
    op.alter_column('mcp_tool_groups', 'api_key',
               existing_type=sa.String(length=512),
               type_=sa.VARCHAR(length=255),
               comment='API密钥',
               existing_comment='加密的API密钥',
               existing_nullable=False)
    op.drop_index('idx_mcp_logs_tool_success_time', table_name='mcp_call_logs')
    op.drop_index('idx_mcp_logs_success', table_name='mcp_call_logs')
    op.drop_index('idx_mcp_logs_group_time', table_name='mcp_call_logs')
    op.drop_index('idx_mcp_logs_duration', table_name='mcp_call_logs')
    op.drop_index('idx_mcp_logs_caller_time', table_name='mcp_call_logs')
    # ### end Alembic commands ###
